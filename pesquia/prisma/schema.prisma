// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  enterprises   Enterprise[]
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Enterprise {
  id              String    @id @default(cuid())
  userId          String
  name            String
  cnpj            String
  emailCommercial String?
  phone           String?
  address         String
  city            String?
  cep             String

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products   Product[]
  sales      Sale[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Partner {
  id             String    @id @default(cuid())
  representative String
  name           String
  cnpj           String?
  email          String
  phone          String
  address        String
  city           String?
  cep            String

  sales          Sale[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Product {
  id           String           @id @default(cuid())
  enterpriseId String?
  name         String
  description  String?
  price        Decimal
  sku          String?
  category     String?
  stock        Int
  stockMin     Int?
  stockMax     Int?
  // image        String?
  // imageUrl     String?
  brand        String?
  supplier     String?


  enterprise   Enterprise?       @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  saleItems    SaleProduct[]

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model Sale {
  id           String           @id @default(cuid())
  userId       String
  enterpriseId String
  partnerId    String

  name         String?
  totalValue   Decimal?


  enterprise   Enterprise       @relation(fields: [enterpriseId], references: [id], onDelete: Cascade)
  partner      Partner          @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  items        SaleProduct[]

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

model SaleProduct {
  saleId      String
  productId   String
  quantity    Int
  unitPrice   Decimal

  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([saleId, productId])
}